package WS1three;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/**
 * @author Alexandros Evangelidis
 * @version 2019-10-28
 */
public class TemperatureTests {

	public static final double TOLERANCE = 0.0000000001;

	@Test
	public void test1() {
		double[] temperatures = {7,8,5,4,5,8,7,9,8,8,7,7,2,3,8,7,10,10,10,1,5,7,10,1,9,10,2,1,5,9,4,8,10,
				10,6,2,5,8,10,2,5,8,3,8,10,1,9,2,4,1,7,1,3,10,6,9,7,9,7,4,7,3,9,7,4,8,1,7,4,3,1,3,7,5,10,
				4,5,9,6,1,5,10,1,6,6,2,7,6,7,8,2,9,7,4,2,10,5,3,3,6,9,10,4,7,9,3,7,6,1,2,8,10,10,9,9,7,1,
				7,2,6,5,10,5,2,4,1,4,1,10,1,7,5,4,8,10,7,10,5,10,2,4,2,5,2,5,1,6,2,6,7,8,8,9,6,10,1,1,8,3,4,
				1,1,3,5,3,6,1,8,10,6,8,7,5,6,10,8,2,7,10,5,3,9,2,1,2,5,2,2,2,8,6,4,7,3,3,5,10,6,7,3,2,7,6,8,
				1,9,10,1,1,4,10,10,4,8,8,8,9,1,10,7,1,7,9,10,9,4,9,5,5,9,9,2,7,1,7,3,10,4,9,4,4,5,2,6,7,10,8,
				3,1,8,4,1,6,7,10,3,3,4,1,3,9,8,7,7,1,3,5,1,2,10,6,7,6,6,7,5,9,4,4,6,7,10,5,4,3,10,9,8,5,8,7,
				4,4,3,1,9,9,10,6,9,10,4,3,9,7,8,7,8,7,4,4,10,3,2,7,10,5,4,5,1,8,5,1,3,4,4,8,5,1,7,10,2,5,9,9,
				4,2,4,2,9,1,3,7,10,9,4,5,3,2,9,7,9,9,9,6,2,10,1,1,9,3,9,8,2,6,
		};
		
		double expectedColdest = 20;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@Test
	public void test2() {
		double[] temperatures = { 68386,63076,21420,2715,62869,15205,6375,40577,92669,40598,77990,
				93917,92668,50837,82638,12125,95039,9793,31996,68998,42771,26057,31920,47433,94501,
				78415,43989,49279,54877,5629,83946,82132,93542,51920,20959,73164,31708,51113,98041,
				19669,87035,51118,56280,53812,18089,7222,97499,569,98006,39273,72275,92703,89479,
				56240,1604,48138,63967,67554,74903,36777,80659,65731,1595,16203,81274,56274,19642,80700,
				5930,28732,67728,19409,26483,94706,6674,58749,39020,76038,46008,23414,80515,44472,34793,80233,
				13374,46615,95007,81702,18635,91928,23924,92058,85307,16208,98649,8974,81981,83069,35797,34199,
				39819,13728,6347,77781,3485,63605,29240,78269,19317,74269,96365,67341,96543,95840,90748,18717,
				78964,52963,9714,56572,6634,71688,2910,31055,18005,45423,63160,15234,78035,3235,13634,54988,
				91253,47516,4824,21660,17323,85459,69407,92144,94741,36334,61361,44452,69988,47273,40760,
				48044,57949,74293,79969,10447,61126,21831,44112,29162,39001,11285,25220,5299,83792,49594,
				88583,18074,28126,91417,53992,20258,75225,26822,59969,81599,21065,71213,80646,3070,66806,
				63717,47852,74760,87273,51103,34177,21088,70597,31020,60730,22905,11112,9143,11749,79049,
				49627,78430,84465,96089,78072,13714,11284,7213,73893,38709,16032,51314,93101,6452,94302,
				64755,1790,67754,49276,22986,14652,10404,3915,63314,42120,79769,41388,70099,58833,60329,
				51417,65735,7330,78394,67760,45683,32296,27337,18491,66839,88707,91999,72664,40061,19410,
				34690,93234,43839,87353,59275,61989,20540,45117,92362,77775,6894,54166,88872,91648,93381,
				72422,56613,77979,66417,54249,99053,71475,22459,30729,51760,64175,2355,24906,41848,72390,
				17356,30869,87778,18565,86388,43344,95904,83899,11275,67227,80632,77838,77013,90008,25124,
				63458,59616,39362,63679,15663,1202,75955,77695,37635,83389,22038,78654,90536,60519,6003,
				85414,42831,48762,51544,65213,59203,69394,52242,65925,76473,76423,17709,31434,71453,57884,
				50531,41503,10290,9705,74889,58078,89493,15843,87733,56701,64675,4395,68142,8261,34869,82246,
				62289,50025,80785,10624,13632,55479,87118,39277,28731,62237,25540,21246,61844,18900,64613,53295,
				93868,44847,68030,81012,71522,3512,57056,68480,3409,12782,16563,64587,98111,35190,56801,30777,
				28373,85440,94936,96333,93959,
		};

		double expectedColdest = 48;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}


}
